{"version":3,"sources":["../src/index.js"],"names":["dotenv","load","connected","socketUrl","process","env","HEROKU_SERVER_URL","LOCAL_SERVER_URL","socket","rl","readline","createInterface","input","stdin","output","stdout","on","console","log","command","emit","resp","prompt","state","setPrompt","name","secondsWaited","connectionInterval","setInterval","clearInterval"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGAA,iBAAOC,IAAP;;AAEA;;;;;;;;AAQA;;;;;;;AAOA,IAAIC,YAAY,KAAhB;AACA,IAAMC,YAAY,QAAQC,QAAQC,GAAR,CAAYC,iBAApB,GAAwCF,QAAQC,GAAR,CAAYE,gBAAtE;AACA,IAAMC,SAAS,sBAAGL,SAAH,CAAf;;AAEA,IAAMM,KAAKC,mBAASC,eAAT,CAAyB;AAClCC,SAAOR,QAAQS,KADmB;AAElCC,UAAQV,QAAQW;AAFkB,CAAzB,CAAX;;AAKAP,OAAOQ,EAAP,CAAU,SAAV,EAAqB,YAAM;AACzBC,UAAQC,GAAR,CAAY,qBAAZ;AACAhB,cAAY,IAAZ;AACD,CAHD;;AAMAO,GAAGO,EAAH,CAAM,MAAN,EAAc,UAACJ,KAAD,EAAW;AACvB,MAAIV,SAAJ,EAAe;AACb,QAAMiB,UAAU,4BAAaP,KAAb,CAAhB;AACA,QAAIO,OAAJ,EAAa;AACXX,aAAOY,IAAP,CAAY,SAAZ,EAAuB,EAAED,gBAAF,EAAvB;AACD;AACF;AACF,CAPD;;AASAX,OAAOQ,EAAP,CAAU,kBAAV,EAA8B,UAACK,IAAD,EAAU;AACtCJ,UAAQC,GAAR,CAAYG,KAAKP,MAAjB;AACAL,KAAGa,MAAH;AACD,CAHD;;AAKAd,OAAOQ,EAAP,CAAU,cAAV,EAA0B,UAACK,IAAD,EAAU;AAClCJ,UAAQC,GAAR,CAAY,oEAAZ;AACA,UAAQG,KAAKE,KAAb;AACE,SAAK,MAAL;AACEd,SAAGe,SAAH,CAAa,aAAb;AACA;AACF,SAAK,SAAL;AACEf,SAAGe,SAAH,CAAgBH,KAAKI,IAArB;AACA;AACF;AACEhB,SAAGe,SAAH,CAAa,aAAb;AARJ;AAUAf,KAAGa,MAAH;AACD,CAbD;;AAeA,IAAII,gBAAgB,CAApB;AACA,IAAMC,qBAAqBC,YAAY,YAAM;AAC3C,MAAI,CAAC1B,SAAL,EAAgB;AACde,YAAQC,GAAR,CAAY,sBAAZ;AACA,QAAIQ,gBAAgB,EAApB,EAAwB;AACtBG,oBAAcF,kBAAd;AACAV,cAAQC,GAAR,CAAY,oCAAZ;AACD,KAHD,MAGO;AACLQ,uBAAiB,CAAjB;AACD;AACF,GARD,MAQO;AACLG,kBAAcF,kBAAd;AACAlB,OAAGa,MAAH;AACD;AACF,CAb0B,EAaxB,IAbwB,CAA3B","file":"index.js","sourcesContent":["\n\nimport readline from 'readline'\nimport io from 'socket.io-client'\nimport dotenv from 'dotenv'\nimport parseCommand from './parse-command'\n\n\ndotenv.load()\n\n/*\n*\n* Using readline for user input\n* See docs here:\n* https://nodejs.org/api/readline.html\n*\n*/\n\n/*\n*\n* Using Socket.io for web socket communication\n* See docs here:\n* https://socket.io/docs/\n*\n*/\nlet connected = false\nconst socketUrl = false ? process.env.HEROKU_SERVER_URL : process.env.LOCAL_SERVER_URL\nconst socket = io(socketUrl)\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\nsocket.on('connect', () => {\n  console.log('Connected to server')\n  connected = true\n})\n\n\nrl.on('line', (input) => {\n  if (connected) {\n    const command = parseCommand(input)\n    if (command) {\n      socket.emit('command', { command })\n    }\n  }\n})\n\nsocket.on('command-response', (resp) => {\n  console.log(resp.output)\n  rl.prompt()\n})\n\nsocket.on('set-appstate', (resp) => {\n  console.log('Remember: You can use \"/help\" to see a list of available commands!')\n  switch (resp.state) {\n    case 'menu':\n      rl.setPrompt('Main Menu: ')\n      break\n    case 'playing':\n      rl.setPrompt(`${resp.name}: `)\n      break\n    default:\n      rl.setPrompt('Main Menu: ')\n  }\n  rl.prompt()\n})\n\nlet secondsWaited = 0\nconst connectionInterval = setInterval(() => {\n  if (!connected) {\n    console.log('Trying to connect...')\n    if (secondsWaited > 10) {\n      clearInterval(connectionInterval)\n      console.log('Could not connect. Try again later')\n    } else {\n      secondsWaited += 1\n    }\n  } else {\n    clearInterval(connectionInterval)\n    rl.prompt()\n  }\n}, 1000)\n"]}